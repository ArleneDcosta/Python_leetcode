import regex
import re
import sqlparse
#re.search() method either returns None (if the pattern doesnâ€™t match), or a re.MatchObject
#group(pattern) pattern should be named capturing group helps pick out maching text or the group() returns the first function returned value(not object)//matched string
inputString='''---
/* Output generated by PLao */
/* @Author Arlene Dcosta */
/* okoko*/
--- Procedure 'pr_ssld12__Get_Person' definition generated from SQL Procedure: pr_ssld12__Get_Person
--- Generator gender: Teradata
--- Generation time: 19/07/2017 12:07:04
-- STARS-7956 Changes implemented on 2019-08-16
-- STARS-6761 Change to use new SRC tables for populating Person data
REPLACE PROCEDURE STARS4_SL_WORK.pr_ssld12__Get_Person
    (
        OUT o_num_rows_processed DECIMAL(38)
    )
pr_ssld12__Get_Person:
BEGIN'''

reg = r"(?<!(\\[\s\S]|[^'])*'|'(\\[\s\S]|[^'])*'|(--.*|\/\/.*|\/\*[\s\S]*?\*\/))(\bBEGIN\b)"

result = regex.search(reg, inputString, flags=regex.IGNORECASE)

                # Split the Procedure in two Parts- Declaration and Definition
if result:
    declarationPart = inputString[:result.start()]
    definitionPart = inputString[result.end():]

print(inputString[result.start():result.end()])
print(result.end())

comment_reg = r"/\*(.|[\r\n])*?\*/"
if re.search(comment_reg, declarationPart):
    commentsPart = re.search(comment_reg, declarationPart).group()
else:
    commentsPart = ''
print(commentsPart+"Adding 1 2 3 ")
declarationPart=declarationPart.replace(commentsPart,'')
#print(declarationPart)
declarationPart=sqlparse.format(declarationPart,strip_comments=True)
#print(declarationPart)
#Procedure declare Part
if '(' in declarationPart:
    procDeclare=declarationPart[:declarationPart.find('(')]
else:
    procDeclare=declarationPart
